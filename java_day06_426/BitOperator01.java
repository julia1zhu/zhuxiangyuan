// 位运算 
public class BitOperator01{
	
	public static void main(String[] args){
		
		System.out.println(2&3);//2按位与3 
		// 推导过程
		// 1. 运算过程都是以补码进行计算，所以先得到2的补码
		//    2的补码  因为从原码看是个正数，所以补码和原码是一样的
		//    int型数据是四个字节  00000000 00000000 00000000 00000010
		// 2. 3的补码=>原码   00000000 00000000 00000000 00000011
		// 3. 按位与
		//	  00000000 00000000 00000000 00000010
		//	  00000000 00000000 00000000 00000011
		//    00000000 00000000 00000000 00000010  
		//    这是运算后的补码，可以补码是正数，所以原码也是正数，所以原码就是补码
		//    结果是2
		
		System.out.println(~-2); //按位取反
		// 推导：
		//1．先得到-2的原码 10000000 00000000 00000000 00000010
		//2. -2的反码   11111111111111111111111111111101
		//3．-2的补码   11111111111111111111111111111110
		//4.~-2操作    00000000 00000000 00000000 00000001   运算后的补码
		//5．运算后的原码就是   00000000 00000000 00000000 00000001 =>1
		System.out.println(~-2);//1
		
		//推导
		//1．得到2的补码 000000000 00000000 00000000 00000010
		//2．~2操作   11111111 11111111 11111111 11111101 运算后的补码
		//3．运算后的反码 11111111 11111111 11111111 11111100
		//4．运算后的原码 10000000 00000000 00000000 00000011 
		System.out. println(~2);//3

	
		/* 	System.out.println(2|3);
			System.out.println(~-5);
			System.out.println(13&7);
			System.out.println(5|4);
			System.out.println(-3^3);//^按位异或
		*/
		
		

	}
}